<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ParametricSearch on gpsk-Tech Blog</title>
    <link>https://hyenakim.github.io/tags/parametricsearch/</link>
    <description>Recent content in ParametricSearch on gpsk-Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2019 19:50:55 +0900</lastBuildDate>
    
	<atom:link href="https://hyenakim.github.io/tags/parametricsearch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>이진탐색(binary search)과 이분탐색(parametric search)_(2)</title>
      <link>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_2/</link>
      <pubDate>Thu, 30 May 2019 19:50:55 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_2/</guid>
      <description>&lt;h1 id=&#34;이진탐색과-이분탐색-2&#34;&gt;* 이진탐색과 이분탐색(2)&lt;/h1&gt;

&lt;h3 id=&#34;이분탐색&#34;&gt;이분탐색&lt;/h3&gt;

&lt;p&gt;이분탐색은 탐색기법중 하나로, 원하는 탐색범위를 두 부분으로 분할해서 원하는 값을 찾는 방식이다. 그렇기 때문에 전부를 탐색하는 경우 O(n)에 비해 이분탐색은 O(logn)의 시간으로 단축시킬 수 있다.&lt;/p&gt;

&lt;p&gt;이분탐색을 이용한 binary search는 이전 장에서 설명했으므로, 이번장에선 활용문제를 풀어보도록 하자.&lt;/p&gt;

&lt;p&gt;이전 장 링크 : &lt;a href=&#34;http://localhost:1313/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_1/&#34;&gt;이진탐색(binary search)과 이분탐색(parametric search)_(1)&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;랜선-자르기&#34;&gt;랜선 자르기&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;문제 링크 : &lt;a href=&#34;https://www.acmicpc.net/problem/1654&#34; title=&#34;https://www.acmicpc.net/problem/1654&#34;&gt;백준1654 랜선자르기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58620684-ab61d700-8302-11e9-9c66-5f2309a1fc25.png&#34; alt=&#34;랜선자르기1&#34; /&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58620695-b583d580-8302-11e9-8b9c-ea87391d92fd.png&#34; alt=&#34;랜선자르기2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;요약  : 주어진 k개의 랜선으로 n개의 랜선을 만들고 싶다. 이떄 만둘 수 있는 최대 랜선의 길이를 구해라.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;풀이-가능한-랜선의-길이-0부터-2-31-1까지-정렬-되어있다고-하자-우리는-0부터-2-31-1로-정렬된-배열에서-이분탐색을-이용해-최종길이를-찾을-수-있다-가능한-길이-중-최대길이를-구하는-문제이므로-앞에-이진탐색의-upper-bound로-풀-수-있다&#34;&gt;풀이 : 가능한 랜선의 길이 0부터 2^31-1까지 정렬 되어있다고 하자. 우리는 0부터 2^31-1로 정렬된 배열에서 이분탐색을 이용해 최종길이를 찾을 수 있다. &lt;strong&gt;가능한 길이 중 최대길이를 구하는 문제이므로 앞에 이진탐색의 upper_bound로 풀 수 있다.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;랜선 길이의 최대값이 1000이라고 하면 아래 그림과 같이 중간값을 decision에 대입해 가능한 답이 되는지 판단 후, 만족하면 중간값보다 더 큰 값도 가능한지 탐색한다. 만족하지 못하고 false가 나오면 랜선의 길이가 더 작아야 한다는 의미이므로 탐색범위를 왼쪽 절반으로 줄인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58627280-ca1b9a00-8311-11e9-8213-9eb47829300a.png&#34; alt=&#34;랜선자르기3&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//랜선 n개를 만들 수 있는 최대 길이 반환
static long optimize(){
        long lo = 0;
        long hi = Integer.MAX_VALUE;
        hi++;
        while(lo&amp;lt;hi){
            long mid = (lo+hi)/2;
            if(decision(mid)) lo = mid + 1;//가능하면 더 긴것도 해보기
            else hi = mid;  //불가능하면 더 짧은거 해보기
        }
        return lo-1;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;#10067; 자주 찾는 질문 &amp;#10067;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;hi++;를 하는 이유&lt;/strong&gt;&lt;br /&gt;
&amp;#10140; 가능한 랜선의 길이는 0~2^31-1까지다. Integer.MAX_VALUE는 2^31-1인데 mid를 구하는 과정에서 나누기2를 하면 2^31-1이 절대 답이 될 수 없게 된다. (lo는 hi보다 항상 작기 때문에) 따라서 2^31-1이 답이 될 경우를 생각해 hi++;를 해주고 시작한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그럼 &lt;strong&gt;hi = Integer.MAX_VALUE + 1; 하면 안되나요?&lt;/strong&gt;&lt;br /&gt;
&amp;#10140; 연산자 우선순위에 의해 (산술연산자가 대입연산자 보다 우위) Integer.MAX_VALUE+1가 먼저 계산되는데, Integer.MAX_VALUE+1은 오버플로우가 되어 Integer.MIN_VALUE와 같게된다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;int가 아닌 long을 사용하는 이유&lt;/strong&gt;&lt;br /&gt;
&amp;#10140; 위에서 hi++를 하면 int형 범위를 넘어버리기 때문에 long으로 선언해야 한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;return lo-1;인 이유&lt;/strong&gt;&lt;br /&gt;
&amp;#10140; 앞장에서 구현한 upper_bound에선 그냥 lo를 반환하였다. 찾는 값의 &lt;strong&gt;다음 인덱스&lt;/strong&gt;를 반환했기 때문이다. 하지만 여기서는 찾는 값의 인덱스를 반환해야 하므로 lo-1을 반환해준다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전체코드 :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.*;
import java.util.StringTokenizer;

public class 랜선자르기 {
    static int k;
    static int n;
    static long len[];
    public static void main(String[] args) throws NumberFormatException, IOException {
        // TODO Auto-generated method stub
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        st = new StringTokenizer(br.readLine());
        k = Integer.parseInt(st.nextToken());
        n = Integer.parseInt(st.nextToken());
        len = new long[k];
        for(int i=0;i&amp;lt;k;i++){
            len[i] = Integer.parseInt(br.readLine());
        }
        System.out.println(optimize());
    }
    //mid길이로 n개의 랜선을 만들 수 있는지 반환
    static boolean decision(long mid){
        int count = 0;
        for(int i=0;i&amp;lt;k;i++){
            count += len[i]/mid;
        }
        return n &amp;lt;= count;
    }
    //랜선 n개를 만들 수 있는 최대 길이 반환
    static long optimize(){
        long lo = 0;
        long hi = Integer.MAX_VALUE;
        hi++;
        while(lo&amp;lt;hi){
            long mid = (lo+hi)/2;
            if(decision(mid)) lo = mid + 1;//가능하면 더 긴것도 가능한지 해보기
            else hi=mid;//불가능하면 더 짧은거 해보기
        }
        return lo-1;
    }
}

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>이진탐색(binary search)과 이분탐색(parametric search)_(1)</title>
      <link>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_1/</link>
      <pubDate>Thu, 30 May 2019 17:17:36 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_1/</guid>
      <description>&lt;h1 id=&#34;이진탐색과-이분탐색-1&#34;&gt;* 이진탐색과 이분탐색(1)&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;이진탐색(binary search) : 이분탐색의 일종으로, &lt;strong&gt;정렬된&lt;/strong&gt; 범위 내에서 원하는 값 찾기&lt;/p&gt;

&lt;p&gt;이분탐색(parametric search) : 탐색범위를 두 부분으로 분할하여 원하는 값 찾기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;이진탐색&#34;&gt;이진탐색&lt;/h3&gt;

&lt;p&gt;이진탐색을 구현하는 방법은 2가지로 나눌 수 있다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;찾는 값이 여러개일 경우 높은 인텍스 출력&lt;/li&gt;
&lt;li&gt;찾는 값이 여러개일 경우 낮은 인덱스 출력&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;예를들어 정렬된 배열 1 2 3 3 3 4 5 6 에서 3을 찾는다 하자.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58617381-f0820b00-82fa-11e9-8ccf-6169f5ac610a.png&#34; alt=&#34;이진탐색1&#34; /&gt;
1번의 경우 upper_bound, 2번의 경우 lower_bound라 할때 결과는 다음과 같다.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58617496-3a6af100-82fb-11e9-9f45-091e9886505c.png&#34; alt=&#34;이진탐색2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;1번의 경우&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int upper_bound(int[] array,int k,int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;=k) lo = mid+1; //k와 같은 값이 나오면 오른쪽으로 이동
            else hi = mid;
        }
        return lo;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2번의 경우&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int lower_bound(int[] array,int k, int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;k) lo = mid+1;    
            else hi = mid; //k보다 크거나 같으면 왼쪽으로 이동
        }
        return lo;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;전체코드:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class 이분탐색 {

    public static void main(String[] args) throws NumberFormatException, IOException {
        // TODO Auto-generated method stub
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        int n = Integer.parseInt(br.readLine());    //arr의 길이
        int arr[] = new int[n];                     //정렬된 배열
        st = new StringTokenizer(br.readLine());
        for(int i=0;i&amp;lt;n;i++)
            arr[i] = Integer.parseInt(st.nextToken());
        int input = Integer.parseInt(br.readLine());//찾고싶은 값
        bw.write(&amp;quot;upper_bound : &amp;quot;+upper_bound(arr,input,0,arr.length));
        bw.write(&amp;quot;\n&amp;quot;);
        bw.write(&amp;quot;lower_bound : &amp;quot;+lower_bound(arr,input,0,arr.length));
        bw.close();
    }
    /*
    * array - 정렬된 배열
    * k - 찾고자 하는 값
    * lo - 범위 내 제일 낮은 인덱스
    * hi - 범위 내 제일 높은 인덱스
    * */
    //정렬된 배열 array에서 k가 들어갈 수 있는 인덱스 중 높은 인덱스 반환
    public static int upper_bound(int[] array,int k,int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;=k) lo = mid+1; //k와 같은 값이 나오면 오른쪽으로 이동
            else hi = mid;
        }
        return lo;
    }
    //정렬된 배열 array에서 k가 들어갈 수 있는 인덱스 중 낮은 인덱스 반환
    public static int lower_bound(int[] array,int k, int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;k) lo = mid+1; //k보다 크거나 같으면 왼쪽으로 이동
            else hi = mid;
        }
        return lo;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;결과 :
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58618108-bc0f4e80-82fc-11e9-82f8-76f2263080c4.png&#34; alt=&#34;이진탐색3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이진탐색을 직접 구현해봤으니 다음 장에선 이분탐색을 활용한 알고리즘 문제를 풀어보자!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>