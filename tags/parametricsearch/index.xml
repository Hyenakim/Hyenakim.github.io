<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ParametricSearch on gpsk-Tech Blog</title>
    <link>https://hyenakim.github.io/tags/parametricsearch/</link>
    <description>Recent content in ParametricSearch on gpsk-Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2019 17:17:36 +0900</lastBuildDate>
    
	<atom:link href="https://hyenakim.github.io/tags/parametricsearch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>이진탐색(binary search)과 이분탐색(parametric search)_(1)</title>
      <link>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_1/</link>
      <pubDate>Thu, 30 May 2019 17:17:36 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_1/</guid>
      <description>&lt;h1 id=&#34;이진탐색과-이분탐색-1&#34;&gt;* 이진탐색과 이분탐색(1)&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;이진탐색(binary search) : 이분탐색의 일종으로, &lt;strong&gt;정렬된&lt;/strong&gt; 범위 내에서 원하는 값 찾기&lt;/p&gt;

&lt;p&gt;이분탐색(parametric search) : 탐색범위를 두 부분으로 분할하여 원하는 값 찾기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;이진탐색&#34;&gt;이진탐색&lt;/h3&gt;

&lt;p&gt;이진탐색을 구현하는 방법은 2가지로 나눌 수 있다.
1. 찾는 값이 여러개일 경우 높은 인텍스 출력
2. 찾는 값이 여러개일 경우 낮은 인덱스 출력&lt;/p&gt;

&lt;p&gt;예를들어 정렬된 배열 1 2 3 3 3 4 5 6 에서 3을 찾는다 하자.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58617381-f0820b00-82fa-11e9-8ccf-6169f5ac610a.png&#34; alt=&#34;이진탐색1&#34; /&gt;
1번의 경우 upper_bound, 2번의 경우 lower_bound라 할때 결과는 다음과 같다.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58617496-3a6af100-82fb-11e9-9f45-091e9886505c.png&#34; alt=&#34;이진탐색2&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int upper_bound(int[] array,int k,int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;=k) lo = mid+1; //k와 같은 값이 나오면 오른쪽으로 이동
            else hi = mid;
        }
        return lo;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2번의 경우&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int lower_bound(int[] array,int k, int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;k) lo = mid+1;    
            else hi = mid; //k보다 크거나 같으면 왼쪽으로 이동
        }
        return lo;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;전체코드:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class 이분탐색 {

    public static void main(String[] args) throws NumberFormatException, IOException {
        // TODO Auto-generated method stub
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        int n = Integer.parseInt(br.readLine());    //arr의 길이
        int arr[] = new int[n];                     //정렬된 배열
        st = new StringTokenizer(br.readLine());
        for(int i=0;i&amp;lt;n;i++)
            arr[i] = Integer.parseInt(st.nextToken());
        int input = Integer.parseInt(br.readLine());
        bw.write(&amp;quot;upper_bound : &amp;quot;+upper_bound(arr,input,0,arr.length));
        bw.write(&amp;quot;\n&amp;quot;);
        bw.write(&amp;quot;lower_bound : &amp;quot;+lower_bound(arr,input,0,arr.length));
        bw.close();
    }
    /*
    * array - 정렬된 배열
    * k - 찾고자 하는 값
    * lo - 범위 내 제일 낮은 인덱스
    * hi - 범위 내 제일 높은 인덱스
    * */
    //정렬된 배열 array에서 k가 들어갈 수 있는 인덱스 중 높은 인덱스 반환
    public static int upper_bound(int[] array,int k,int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;=k) lo = mid+1; //k와 같은 값이 나오면 오른쪽으로 이동
            else hi = mid;
        }
        return lo;
    }
    //정렬된 배열 array에서 k가 들어갈 수 있는 인덱스 중 낮은 인덱스 반환
    public static int lower_bound(int[] array,int k, int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;k) lo = mid+1; //k보다 크거나 같으면 왼쪽으로 이동
            else hi = mid;
        }
        return lo;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;결과 :
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58618108-bc0f4e80-82fc-11e9-82f8-76f2263080c4.png&#34; alt=&#34;이진탐색3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이진탐색을 직접 구현해봤으니 다음 장에선 이분탐색을 활용한 알고리즘 문제를 풀어보자!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>