<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Array on gpsk-Tech Blog</title>
    <link>https://hyenakim.github.io/tags/array/</link>
    <description>Recent content in Array on gpsk-Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 May 2019 14:55:19 +0900</lastBuildDate>
    
	<atom:link href="https://hyenakim.github.io/tags/array/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Array</title>
      <link>https://hyenakim.github.io/2019/05/array/</link>
      <pubDate>Mon, 27 May 2019 14:55:19 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/05/array/</guid>
      <description>&lt;h1 id=&#34;배열&#34;&gt;* 배열&lt;/h1&gt;

&lt;p&gt;연속된 자료를 저장하기 위한 자료구조&lt;/p&gt;

&lt;h3 id=&#34;java-배열-선언&#34;&gt;java 배열 선언&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;int[] array = new int[6];
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;단점
* 크기가 넘어가면 더 큰 배열을 새로 할당해야 한다.
* 길이가 n인 배열 중간에 원소를 삽입/삭제할 경우 O(n)의 시간이 걸린다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 단점을 해결하기 위해 동적배열과 연결리스트라는 자료구조를 사용한다.&lt;/p&gt;

&lt;h1 id=&#34;동적-배열&#34;&gt;* 동적 배열&lt;/h1&gt;

&lt;p&gt;자료의 크기가 변함에 따라 배열의 크기도 변하는 자료구조&lt;/p&gt;

&lt;h3 id=&#34;java-표준-라이브러리&#34;&gt;java 표준 라이브러리&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ArrayList&amp;lt;Integer&amp;gt; ArrayList = new ArrayList&amp;lt;&amp;gt;();

/*원소 추가*/
ArrayList.add(1);
ArrayList.add(2);

/*원소 삭제*/
ArrayList.remove(Integer.valueOf(2));

/*원소 찾기*/
System.out.println(ArrayList.indexOf(1));
/*
* 결과 :
* 0
* */

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;특징
* 삽입시 메모리를 재할당 하여 속도가 느리다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;연결-리스트&#34;&gt;* 연결 리스트&lt;/h1&gt;

&lt;p&gt;연결된 자료의 정보만 담고 있는 자료구조&lt;/p&gt;

&lt;h3 id=&#34;java-표준-라이브러리-1&#34;&gt;java 표준 라이브러리&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;LinkedList&amp;lt;Integer&amp;gt; LinkedList = new LinkedList&amp;lt;Integer&amp;gt;();

/*원소 추가*/
LinkedList.add(1);
LinkedList.add(2);
LinkedList.add(3);

/*원소 삭제*/
LinkedList.remove(Integer.valueOf(2));

/*순서대로 출력*/
Iterator&amp;lt;Integer&amp;gt; iterator = LinkedList.iterator();
while(iterator.hasNext())
{
  int n = iterator.next();
  System.out.println(n);
}
/*
* 결과 :
* 1
* 3
* */
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;특징
* 추가/삭제가 빈번하게 일어나는 대용량 데이터 처리가 필요할 때 사용하면 성능이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>