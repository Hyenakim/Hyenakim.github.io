<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BitMask on gpsk-Tech Blog</title>
    <link>https://hyenakim.github.io/tags/bitmask/</link>
    <description>Recent content in BitMask on gpsk-Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2019 22:36:39 +0900</lastBuildDate>
    
	<atom:link href="https://hyenakim.github.io/tags/bitmask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>비트마스크(BitMask)</title>
      <link>https://hyenakim.github.io/2019/04/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%ACbitmask/</link>
      <pubDate>Tue, 09 Apr 2019 22:36:39 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/04/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%ACbitmask/</guid>
      <description>&lt;h1 id=&#34;비트마스크&#34;&gt;* 비트마스크&lt;/h1&gt;

&lt;p&gt;정수의 이진수 표현을 자료구조로 쓰는 기법&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;장점&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;빠른 수행시간&lt;/li&gt;
&lt;li&gt;간결한 코드&lt;/li&gt;
&lt;li&gt;적은 메모리&lt;/li&gt;
&lt;li&gt;연관배열을 배열로 대체&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;비트-연산자&#34;&gt;비트 연산자&lt;/h3&gt;

&lt;h4 id=&#34;and&#34;&gt;* AND(&amp;amp;)&lt;/h4&gt;

&lt;p&gt;해당비트가 모두 켜져있을 때만 켜진다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 1 0 0 (12)
    1 0 1 0 (10)
AND -----------
    1 0 0 0 (8)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;or&#34;&gt;* OR(|)&lt;/h4&gt;

&lt;p&gt;해당비트중 하나만 켜져있으면 켜진다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 1 0 0 (12)
    1 0 1 0 (10)
OR  -----------
    1 1 1 0 (14)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;xor&#34;&gt;* XOR(^)&lt;/h4&gt;

&lt;p&gt;하나는 켜져있고 하나는 꺼져있을 때만 켜진다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 1 0 0 (12)
    1 0 1 0 (10)
XOR -----------
    0 1 1 0 (6)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;not&#34;&gt;* NOT(~)&lt;/h4&gt;

&lt;p&gt;켜져 있는 비트는 끄고, 꺼져 있는 비트는 켠다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ~12 = -13 (부호있는 정수)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;shift&#34;&gt;* SHIFT(&amp;lt;&amp;lt;,&amp;gt;&amp;gt;,&amp;gt;&amp;gt;&amp;gt;)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;우측 쉬프트 연산(&amp;gt;&amp;gt;)은 좌측의 정수를 우측에 입력한 정수 만큼 bit 를 이동시킨다.&lt;/li&gt;
&lt;li&gt;좌측 쉬프트 연산(&amp;lt;&amp;lt;)은 남은 부분을 0으로 채운다.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(자바) 우측 쉬프트 연산(&amp;gt;&amp;gt;&amp;gt;) 우측으로 이동 후 나머지는 0으로 채운다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12(1 1 0 0) &amp;gt;&amp;gt; 2 = 3(0 0 1 1)
12(1 1 0 0) &amp;lt;&amp;lt; 2 = 48(1 1 0 0 0 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;연산자-활용-예제&#34;&gt;* 연산자 활용 예제&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;1. AND(&amp;amp;)와 시프트(&amp;lt;&amp;lt;) 연산을 이용한 십진수에서 이진수 변환 및 출력&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void printBinary(int num) {
      for(int i=31;i&amp;gt;=0;i--) {
          int bit = (num &amp;amp; 1&amp;lt;&amp;lt;i);
          if(bit&amp;gt;0)
              System.out.print(1);
          else 
              System.out.print(0);
      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;2. 비트마스킹을 활용한 에라토스테네스의 체&lt;/em&gt;
- 기본 원리&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Arrays.fill(sieve, (char)255);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;unsigned char는 부호없는 8비트형식(자바에선 2바이트, 즉 16비트이다)으로 0~255까지의 표현범위를 가진다. 아래의 sieve배열은 에라테네토스테네스의체를 통해 인덱스의 수가 소수인지 아닌지 체크를 한 결과를 담고있다.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/55786127-a47ecb00-5aee-11e9-81fb-a45d953f69ae.png&#34; alt=&#34;sieve배열&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;k가 소수인지 아닌지 확인 방법&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static boolean isPrime(int k) {
    return (sieve[k&amp;gt;&amp;gt;&amp;gt;3] &amp;amp; (1&amp;lt;&amp;lt;(k&amp;amp;7))) == 0 ? false : true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;1. 인덱스 찾기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;시프트 연산(&lt;strong&gt;k&amp;gt;&amp;gt;&amp;gt;3&lt;/strong&gt;)으로 숫자 k의 인덱스를 구한다. &lt;strong&gt;k&amp;amp;7&lt;/strong&gt;은 2와 같고 &lt;strong&gt;1&amp;lt;&amp;lt;2&lt;/strong&gt;은 1을 좌측으로 2번 시프트 한것이므로 00000100가 된다.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/55785822-11459580-5aee-11e9-880c-38ea3a6c237f.png&#34; alt=&#34;인덱스찾기&#34; /&gt;
&lt;strong&gt;2. 소수 확인&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AND(&amp;amp;) 연산자를 사용했을때 소수라면 자기자신이 나온다.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/55788573-836ca900-5af3-11e9-963a-1486d936c6ef.png&#34; alt=&#34;소수찾기&#34; /&gt;
- k가 소수가 아님을 체크하는 방법&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void setComposite(int k) {
    sieve[k&amp;gt;&amp;gt;&amp;gt;3] &amp;amp;= ~(1 &amp;lt;&amp;lt; (k&amp;amp;7));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/55789370-31c51e00-5af5-11e9-97de-7e909ed35f23.png&#34; alt=&#34;소수아님기록&#34; /&gt;
전체코드&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class 에라토스테네스의체 {
    public static int LAST_NUM = 20;
    public static char sieve[] = new char[(LAST_NUM + 7)/8 + 1];
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //에라토스테네스의 체 구하기
        eratosthenes();
        //소수 출력
        for(int i=0;i&amp;lt;=LAST_NUM;i++)
            if(isPrime(i))
                System.out.print(i+&amp;quot; &amp;quot;);
    }
    //k가 소수인지 아닌지 반환
    public static boolean isPrime(int k) {
        return (sieve[k&amp;gt;&amp;gt;&amp;gt;3] &amp;amp; (1&amp;lt;&amp;lt;(k&amp;amp;7))) == 0 ? false : true;
    }
    //k가 소수가 아님을 표시해둠
    public static void setComposite(int k) {
        sieve[k&amp;gt;&amp;gt;&amp;gt;3] &amp;amp;= ~(1 &amp;lt;&amp;lt; (k&amp;amp;7));
    }
    public static void eratosthenes() {
        //모든비트를 1로 초기화
        Arrays.fill(sieve, (char)255);
        setComposite(0);
        setComposite(1);
        for(int i=2;i&amp;lt;=Math.sqrt(LAST_NUM);i++)
            if(isPrime(i))
                //i의 배수(j)에 대해 isPrime(j)=false로 둔다.
                for(int j=i*i;j&amp;lt;=LAST_NUM;j+=i)
                    setComposite(j);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;연산자-우선순위&#34;&gt;연산자 우선순위&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;최우선연산자 ( ., [], () )&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;단항연산자 ( ++,&amp;ndash;,!,~,+/-   : 부정, bit변환&amp;gt;부호&amp;gt;증감)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;산술연산자 ( *,/,%,+,-,shift) &amp;lt; 시프트연산자 ( &amp;gt;&amp;gt;,&amp;lt;&amp;lt;,&amp;gt;&amp;gt;&amp;gt; ) &amp;gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;비교연산자 ( &amp;gt;,&amp;lt;,&amp;gt;=,&amp;lt;=,==,!= )&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;비트연산자 ( &amp;amp;,|,,~ )&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;논리연산자 (&amp;amp;&amp;amp; , || , !)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;삼항연산자 (조건식) ? :&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;대입연산자 =,*=,/=,%=,+=,-=&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>