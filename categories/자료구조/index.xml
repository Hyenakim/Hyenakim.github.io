<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>자료구조 on gpsk-Tech Blog</title>
    <link>https://hyenakim.github.io/categories/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/</link>
    <description>Recent content in 자료구조 on gpsk-Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 May 2019 22:03:29 +0900</lastBuildDate>
    
	<atom:link href="https://hyenakim.github.io/categories/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>스택(Stack),큐(Queue),데크(Deque)</title>
      <link>https://hyenakim.github.io/2019/05/%EC%8A%A4%ED%83%9Dstack%ED%81%90queue%EB%8D%B0%ED%81%ACdeque/</link>
      <pubDate>Mon, 27 May 2019 22:03:29 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/05/%EC%8A%A4%ED%83%9Dstack%ED%81%90queue%EB%8D%B0%ED%81%ACdeque/</guid>
      <description>&lt;h1 id=&#34;스택&#34;&gt;* 스택&lt;/h1&gt;

&lt;p&gt;나중에 들어온게 먼저 나가는 &lt;strong&gt;LIFO&lt;/strong&gt;형태의 자료구조&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LIFO : Last in First out&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;java-라이브러리-스택관련-메서드&#34;&gt;java 라이브러리 스택관련 메서드&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;Integer&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;push(E item)

&lt;ul&gt;
&lt;li&gt;해당 아이템을 스택의 top에 쌓는다.&lt;/li&gt;
&lt;li&gt;쌓았으면 true, 못쌓았으면 false를 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pop()

&lt;ul&gt;
&lt;li&gt;스택의 맨 위를 삭제하고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;peek()

&lt;ul&gt;
&lt;li&gt;스택의 맨위를 삭제하지 않고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;empty()

&lt;ul&gt;
&lt;li&gt;스택이 비어있으면 true, 아니면 false를 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;search(Object o)

&lt;ul&gt;
&lt;li&gt;해당 Object의 위치를 반환한다. top이면 1, 없으면 -1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;큐&#34;&gt;* 큐&lt;/h1&gt;

&lt;p&gt;먼저 들어온게 먼저 나가는 &lt;strong&gt;FIFO&lt;/strong&gt;형태의 자료구조&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FIFO : First in First out&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;java-라이브러리-큐관련-메서드&#34;&gt;java 라이브러리 큐관련 메서드&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Queue&amp;lt;Integer&amp;gt; q = new LinkedList&amp;lt;Integer&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;offer(E item)

&lt;ul&gt;
&lt;li&gt;해당 아이템을 큐에 넣는다.&lt;/li&gt;
&lt;li&gt;넣었으면 true, 못넣었으면 false반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;poll()

&lt;ul&gt;
&lt;li&gt;큐의 맨 앞을 삭제하고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;peek()

&lt;ul&gt;
&lt;li&gt;큐의 맨앞을 삭제하지 않고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;isEmpty()

&lt;ul&gt;
&lt;li&gt;큐가 비어있으면 true, 아니면 false를 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;덱&#34;&gt;* 덱&lt;/h1&gt;

&lt;p&gt;양쪽에서 삽입 삭제가 가능한 형태의 자료구조
&amp;gt;사용에따라 스택, 큐가 될 수 있다.&lt;/p&gt;

&lt;h3 id=&#34;java-라이브러리-덱관련-메서드&#34;&gt;java 라이브러리 덱관련 메서드&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Deque&amp;lt;Integer&amp;gt; deque = new ArrayDeque&amp;lt;Integer&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;add(E item)

&lt;ul&gt;
&lt;li&gt;해당 아이템을 덱에 넣는다.&lt;/li&gt;
&lt;li&gt;addFirst(E item)

&lt;ul&gt;
&lt;li&gt;덱의 맨 앞에 넣는다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;addLast(E item)

&lt;ul&gt;
&lt;li&gt;덱의 맨 뒤에 넣는다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;poll()

&lt;ul&gt;
&lt;li&gt;덱의 맨 앞을 삭제하고 반환한다.&lt;/li&gt;
&lt;li&gt;pollFirst()

&lt;ul&gt;
&lt;li&gt;덱의 맨 앞을 삭제하고 반환한다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pollLast()

&lt;ul&gt;
&lt;li&gt;덱의 맨 뒤를 삭제하고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;peek()

&lt;ul&gt;
&lt;li&gt;덱의 맨앞을 삭제하지 않고 반환한다.&lt;/li&gt;
&lt;li&gt;peekFirst()

&lt;ul&gt;
&lt;li&gt;덱의 맨앞을 삭제하지 않고 반환한다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;peekLast()

&lt;ul&gt;
&lt;li&gt;덱의 맨뒤를 삭제하지 않고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;isEmpty()

&lt;ul&gt;
&lt;li&gt;덱이 비어있으면 true, 아니면 false를 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>배열(Array), 동적배열(ArrayList), 연결리스트(LinkedList)</title>
      <link>https://hyenakim.github.io/2019/05/%EB%B0%B0%EC%97%B4array-%EB%8F%99%EC%A0%81%EB%B0%B0%EC%97%B4arraylist-%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist/</link>
      <pubDate>Mon, 27 May 2019 14:55:19 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/05/%EB%B0%B0%EC%97%B4array-%EB%8F%99%EC%A0%81%EB%B0%B0%EC%97%B4arraylist-%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist/</guid>
      <description>&lt;h1 id=&#34;배열&#34;&gt;* 배열&lt;/h1&gt;

&lt;p&gt;연속된 자료를 저장하기 위한 자료구조&lt;/p&gt;

&lt;h3 id=&#34;java-배열-선언&#34;&gt;java 배열 선언&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;int[] array = new int[6];
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;단점
* 크기가 넘어가면 더 큰 배열을 새로 할당해야 한다.
* 길이가 n인 배열 중간에 원소를 삽입/삭제할 경우 O(n)의 시간이 걸린다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 단점을 해결하기 위해 동적배열과 연결리스트라는 자료구조를 사용한다.&lt;/p&gt;

&lt;h1 id=&#34;동적-배열&#34;&gt;* 동적 배열&lt;/h1&gt;

&lt;p&gt;자료의 크기가 변함에 따라 배열의 크기도 변하는 자료구조&lt;/p&gt;

&lt;h3 id=&#34;java-표준-라이브러리&#34;&gt;java 표준 라이브러리&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ArrayList&amp;lt;Integer&amp;gt; ArrayList = new ArrayList&amp;lt;&amp;gt;();

/*원소 추가*/
ArrayList.add(1);
ArrayList.add(2);

/*원소 삭제*/
ArrayList.remove(Integer.valueOf(2));

/*원소 찾기*/
System.out.println(ArrayList.indexOf(1));
/*
* 결과 :
* 0
* */

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;특징
* 삽입시 메모리를 재할당 하여 속도가 느리다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;연결-리스트&#34;&gt;* 연결 리스트&lt;/h1&gt;

&lt;p&gt;연결된 자료의 정보만 담고 있는 자료구조&lt;/p&gt;

&lt;h3 id=&#34;java-표준-라이브러리-1&#34;&gt;java 표준 라이브러리&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;LinkedList&amp;lt;Integer&amp;gt; LinkedList = new LinkedList&amp;lt;Integer&amp;gt;();

/*원소 추가*/
LinkedList.add(1);
LinkedList.add(2);
LinkedList.add(3);

/*원소 삭제*/
LinkedList.remove(Integer.valueOf(2));

/*순서대로 출력*/
Iterator&amp;lt;Integer&amp;gt; iterator = LinkedList.iterator();
while(iterator.hasNext())
{
  int n = iterator.next();
  System.out.println(n);
}
/*
* 결과 :
* 1
* 3
* */
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;특징
* 추가/삭제가 빈번하게 일어나는 대용량 데이터 처리가 필요할 때 사용하면 성능이 좋다.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>