<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on gpsk-Tech Blog</title>
    <link>https://hyenakim.github.io/post/</link>
    <description>Recent content in Posts on gpsk-Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2019 19:50:55 +0900</lastBuildDate>
    
	<atom:link href="https://hyenakim.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>이진탐색(binary search)과 이분탐색(parametric search)_(2)</title>
      <link>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_2/</link>
      <pubDate>Thu, 30 May 2019 19:50:55 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_2/</guid>
      <description>&lt;h1 id=&#34;이진탐색과-이분탐색-2&#34;&gt;* 이진탐색과 이분탐색(2)&lt;/h1&gt;

&lt;h3 id=&#34;이분탐색&#34;&gt;이분탐색&lt;/h3&gt;

&lt;p&gt;이분탐색은 탐색기법중 하나로, 원하는 탐색범위를 두 부분으로 분할해서 원하는 값을 찾는 방식이다. 그렇기 때문에 전부를 탐색하는 경우 O(n)에 비해 이분탐색은 O(logn)의 시간으로 단축시킬 수 있다.&lt;/p&gt;

&lt;p&gt;이분탐색을 이용한 binary search는 이전 장에서 설명했으므로, 이번장에선 활용문제를 풀어보도록 하자.&lt;/p&gt;

&lt;p&gt;이전 장 링크 : &lt;a href=&#34;http://localhost:1313/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_1/&#34;&gt;이진탐색(binary search)과 이분탐색(parametric search)_(1)&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;랜선-자르기&#34;&gt;랜선 자르기&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;문제 링크 : &lt;a href=&#34;https://www.acmicpc.net/problem/1654&#34; title=&#34;https://www.acmicpc.net/problem/1654&#34;&gt;백준1654 랜선자르기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58620684-ab61d700-8302-11e9-9c66-5f2309a1fc25.png&#34; alt=&#34;랜선자르기1&#34; /&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58620695-b583d580-8302-11e9-8b9c-ea87391d92fd.png&#34; alt=&#34;랜선자르기2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;요약  : 주어진 k개의 랜선으로 n개의 랜선을 만들고 싶다. 이떄 만둘 수 있는 최대 랜선의 길이를 구해라.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;풀이-가능한-랜선의-길이-0부터-2-31-1까지-정렬-되어있다고-하자-우리는-0부터-2-31-1로-정렬된-배열에서-이분탐색을-이용해-최종길이를-찾을-수-있다-가능한-길이-중-최대길이를-구하는-문제이므로-앞에-이진탐색의-upper-bound로-풀-수-있다&#34;&gt;풀이 : 가능한 랜선의 길이 0부터 2^31-1까지 정렬 되어있다고 하자. 우리는 0부터 2^31-1로 정렬된 배열에서 이분탐색을 이용해 최종길이를 찾을 수 있다. &lt;strong&gt;가능한 길이 중 최대길이를 구하는 문제이므로 앞에 이진탐색의 upper_bound로 풀 수 있다.&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;이진탐색하는 과정을 좀더 자세하게 알아보자. 랜선 길이의 최대값이 1000이라고 하면 아래 그림과 같이 중간값을 decision에 대입해 가능한 답이 되는지 판단 후, 만족하면 중간값보다 더 큰 값도 가능한지 탐색한다. 만족하지 못하고 false가 나오면 랜선의 길이가 더 작아야 한다는 의미이므로 탐색범위를 왼쪽 절반으로 줄인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58627280-ca1b9a00-8311-11e9-8213-9eb47829300a.png&#34; alt=&#34;랜선자르기3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;위의 탐색과정을 하는 함수 optimize()를 구현해 준다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//랜선 n개를 만들 수 있는 최대 길이 반환
static long optimize(){
        long lo = 0;
        long hi = Integer.MAX_VALUE;
        hi++;
        while(lo&amp;lt;hi){
            long mid = (lo+hi)/2;
            if(decision(mid)) lo = mid + 1;//가능하면 더 긴것도 해보기
            else hi = mid;  //불가능하면 더 짧은거 해보기
        }
        return lo-1;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;#10067; 자주 찾는 질문 &amp;#10067;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;hi++;를 하는 이유&lt;/strong&gt;&lt;br /&gt;
&amp;#10140; 가능한 랜선의 길이는 0~2^31-1까지다. Integer.MAX_VALUE는 2^31-1인데 mid를 구하는 과정에서 나누기2를 하면 2^31-1이 절대 답이 될 수 없게 된다. (lo는 hi보다 항상 작기 때문에) 따라서 2^31-1이 답이 될 경우를 생각해 hi++;를 해주고 시작한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;그럼 &lt;strong&gt;hi = Integer.MAX_VALUE + 1; 하면 안되나요?&lt;/strong&gt;&lt;br /&gt;
&amp;#10140; 연산자 우선순위에 의해 (산술연산자가 대입연산자 보다 우위) Integer.MAX_VALUE+1가 먼저 계산되는데, Integer.MAX_VALUE+1은 오버플로우가 되어 Integer.MIN_VALUE와 같게된다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;int가 아닌 long을 사용하는 이유&lt;/strong&gt;&lt;br /&gt;
&amp;#10140; 위에서 hi++를 하면 int형 범위를 넘어버리기 때문에 long으로 선언해야 한다.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;return lo-1;인 이유&lt;/strong&gt;&lt;br /&gt;
&amp;#10140; 앞장에서 구현한 upper_bound에선 그냥 lo를 반환하였다. 찾는 값의 &lt;strong&gt;다음 인덱스&lt;/strong&gt;를 반환했기 때문이다. 하지만 여기서는 찾는 값의 인덱스를 반환해야 하므로 lo-1을 반환해준다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;전체코드 :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.*;
import java.util.StringTokenizer;

public class 랜선자르기 {
    static int k;
    static int n;
    static long len[];
    public static void main(String[] args) throws NumberFormatException, IOException {
        // TODO Auto-generated method stub
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        st = new StringTokenizer(br.readLine());
        k = Integer.parseInt(st.nextToken());
        n = Integer.parseInt(st.nextToken());
        len = new long[k];
        for(int i=0;i&amp;lt;k;i++){
            len[i] = Integer.parseInt(br.readLine());
        }
        System.out.println(optimize());
    }
    //mid길이로 n개의 랜선을 만들 수 있는지 반환
    static boolean decision(long mid){
        int count = 0;
        for(int i=0;i&amp;lt;k;i++){
            count += len[i]/mid;
        }
        return n &amp;lt;= count;
    }
    //랜선 n개를 만들 수 있는 최대 길이 반환
    static long optimize(){
        long lo = 0;
        long hi = Integer.MAX_VALUE;
        hi++;
        while(lo&amp;lt;hi){
            long mid = (lo+hi)/2;
            if(decision(mid)) lo = mid + 1;//가능하면 더 긴것도 가능한지 해보기
            else hi=mid;//불가능하면 더 짧은거 해보기
        }
        return lo-1;
    }
}

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>이진탐색(binary search)과 이분탐색(parametric search)_(1)</title>
      <link>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_1/</link>
      <pubDate>Thu, 30 May 2019 17:17:36 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/05/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89binary-search%EA%B3%BC-%EC%9D%B4%EB%B6%84%ED%83%90%EC%83%89parametric-search_1/</guid>
      <description>&lt;h1 id=&#34;이진탐색과-이분탐색-1&#34;&gt;* 이진탐색과 이분탐색(1)&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;이진탐색(binary search) : 이분탐색의 일종으로, &lt;strong&gt;정렬된&lt;/strong&gt; 범위 내에서 원하는 값 찾기&lt;/p&gt;

&lt;p&gt;이분탐색(parametric search) : 탐색범위를 두 부분으로 분할하여 원하는 값 찾기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;이진탐색&#34;&gt;이진탐색&lt;/h3&gt;

&lt;p&gt;이진탐색을 구현하는 방법은 2가지로 나눌 수 있다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;찾는 값이 여러개일 경우 높은 인텍스 출력&lt;/li&gt;
&lt;li&gt;찾는 값이 여러개일 경우 낮은 인덱스 출력&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;예를들어 정렬된 배열 1 2 3 3 3 4 5 6 에서 3을 찾는다 하자.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58617381-f0820b00-82fa-11e9-8ccf-6169f5ac610a.png&#34; alt=&#34;이진탐색1&#34; /&gt;
1번의 경우 upper_bound, 2번의 경우 lower_bound라 할때 결과는 다음과 같다.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58617496-3a6af100-82fb-11e9-9f45-091e9886505c.png&#34; alt=&#34;이진탐색2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 upper_bound를 구현해보자. 인자로 졍렬된 배열 array, 찾고싶은 값 k, 인덱스의 시작lo와 끝값hi을 넣어준다.
while문을 돌면서 lo가 hi와 같거나 커지기 전까지 lo 또는 hi를 움직이면서 범위를 줄여나간다. upper_bound는 같은 값이
있어도 제일 큰 인덱스를 반환해야 하므로 k보다 큰값이 나오기 전까지 lo를 옮겨 오른쪽을 계속 탐색하게 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int upper_bound(int[] array,int k,int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;=k) lo = mid+1; //k와 같은 값이 나오면 오른쪽으로 이동
            else hi = mid;
        }
        return lo;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lower_bound도 같은 방식으로 구현한다. upper_bound와 차이점은 lower_bound는 k와 같은 값이 나와도 왼쪽으로 이동하여
k보다 작은값이 나올때까지 탐색한다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static int lower_bound(int[] array,int k, int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;k) lo = mid+1;    
            else hi = mid; //k보다 크거나 같으면 왼쪽으로 이동
        }
        return lo;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;전체코드:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class 이분탐색 {

    public static void main(String[] args) throws NumberFormatException, IOException {
        // TODO Auto-generated method stub
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        int n = Integer.parseInt(br.readLine());    //arr의 길이
        int arr[] = new int[n];                     //정렬된 배열
        st = new StringTokenizer(br.readLine());
        for(int i=0;i&amp;lt;n;i++)
            arr[i] = Integer.parseInt(st.nextToken());
        int input = Integer.parseInt(br.readLine());//찾고싶은 값
        bw.write(&amp;quot;upper_bound : &amp;quot;+upper_bound(arr,input,0,arr.length));
        bw.write(&amp;quot;\n&amp;quot;);
        bw.write(&amp;quot;lower_bound : &amp;quot;+lower_bound(arr,input,0,arr.length));
        bw.close();
    }
    /*
    * array - 정렬된 배열
    * k - 찾고자 하는 값
    * lo - 범위 내 제일 낮은 인덱스
    * hi - 범위 내 제일 높은 인덱스
    * */
    //정렬된 배열 array에서 k가 들어갈 수 있는 인덱스 중 높은 인덱스 반환
    public static int upper_bound(int[] array,int k,int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;=k) lo = mid+1; //k와 같은 값이 나오면 오른쪽으로 이동
            else hi = mid;
        }
        return lo;
    }
    //정렬된 배열 array에서 k가 들어갈 수 있는 인덱스 중 낮은 인덱스 반환
    public static int lower_bound(int[] array,int k, int lo,int hi) {
        int mid;
        while(lo&amp;lt;hi) {
            mid = (lo+hi)/2;
            if(array[mid]&amp;lt;k) lo = mid+1; //k보다 크거나 같으면 왼쪽으로 이동
            else hi = mid;
        }
        return lo;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;결과 :
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/58618108-bc0f4e80-82fc-11e9-82f8-76f2263080c4.png&#34; alt=&#34;이진탐색3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이진탐색을 직접 구현해봤으니 다음 장에선 이분탐색을 활용한 알고리즘 문제를 풀어보자!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>비트마스크(BitMask)</title>
      <link>https://hyenakim.github.io/2019/04/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%ACbitmask/</link>
      <pubDate>Tue, 09 Apr 2019 22:36:39 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/04/%EB%B9%84%ED%8A%B8%EB%A7%88%EC%8A%A4%ED%81%ACbitmask/</guid>
      <description>&lt;h1 id=&#34;비트마스크&#34;&gt;* 비트마스크&lt;/h1&gt;

&lt;p&gt;정수의 이진수 표현을 자료구조로 쓰는 기법&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;장점&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;빠른 수행시간&lt;/li&gt;
&lt;li&gt;간결한 코드&lt;/li&gt;
&lt;li&gt;적은 메모리&lt;/li&gt;
&lt;li&gt;연관배열을 배열로 대체&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;비트-연산자&#34;&gt;비트 연산자&lt;/h3&gt;

&lt;h4 id=&#34;and&#34;&gt;* AND(&amp;amp;)&lt;/h4&gt;

&lt;p&gt;해당비트가 모두 켜져있을 때만 켜진다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 1 0 0 (12)
    1 0 1 0 (10)
AND -----------
    1 0 0 0 (8)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;or&#34;&gt;* OR(|)&lt;/h4&gt;

&lt;p&gt;해당비트중 하나만 켜져있으면 켜진다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 1 0 0 (12)
    1 0 1 0 (10)
OR  -----------
    1 1 1 0 (14)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;xor&#34;&gt;* XOR(^)&lt;/h4&gt;

&lt;p&gt;하나는 켜져있고 하나는 꺼져있을 때만 켜진다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1 1 0 0 (12)
    1 0 1 0 (10)
XOR -----------
    0 1 1 0 (6)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;not&#34;&gt;* NOT(~)&lt;/h4&gt;

&lt;p&gt;켜져 있는 비트는 끄고, 꺼져 있는 비트는 켠다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ~12 = -13 (부호있는 정수)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;shift&#34;&gt;* SHIFT(&amp;lt;&amp;lt;,&amp;gt;&amp;gt;,&amp;gt;&amp;gt;&amp;gt;)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;우측 쉬프트 연산(&amp;gt;&amp;gt;)은 좌측의 정수를 우측에 입력한 정수 만큼 bit 를 이동시킨다.&lt;/li&gt;
&lt;li&gt;좌측 쉬프트 연산(&amp;lt;&amp;lt;)은 남은 부분을 0으로 채운다.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(자바) 우측 쉬프트 연산(&amp;gt;&amp;gt;&amp;gt;) 우측으로 이동 후 나머지는 0으로 채운다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12(1 1 0 0) &amp;gt;&amp;gt; 2 = 3(0 0 1 1)
12(1 1 0 0) &amp;lt;&amp;lt; 2 = 48(1 1 0 0 0 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;연산자-활용-예제&#34;&gt;* 연산자 활용 예제&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;1. AND(&amp;amp;)와 시프트(&amp;lt;&amp;lt;) 연산을 이용한 십진수에서 이진수 변환 및 출력&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void printBinary(int num) {
      for(int i=31;i&amp;gt;=0;i--) {
          int bit = (num &amp;amp; 1&amp;lt;&amp;lt;i);
          if(bit&amp;gt;0)
              System.out.print(1);
          else 
              System.out.print(0);
      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;2. 비트마스킹을 활용한 에라토스테네스의 체&lt;/em&gt;
- 기본 원리&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Arrays.fill(sieve, (char)255);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;unsigned char는 부호없는 8비트형식(자바에선 2바이트, 즉 16비트이다)으로 0~255까지의 표현범위를 가진다. 아래의 sieve배열은 에라테네토스테네스의체를 통해 인덱스의 수가 소수인지 아닌지 체크를 한 결과를 담고있다.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/55786127-a47ecb00-5aee-11e9-81fb-a45d953f69ae.png&#34; alt=&#34;sieve배열&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;k가 소수인지 아닌지 확인 방법&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static boolean isPrime(int k) {
    return (sieve[k&amp;gt;&amp;gt;&amp;gt;3] &amp;amp; (1&amp;lt;&amp;lt;(k&amp;amp;7))) == 0 ? false : true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;1. 인덱스 찾기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;시프트 연산(&lt;strong&gt;k&amp;gt;&amp;gt;&amp;gt;3&lt;/strong&gt;)으로 숫자 k의 인덱스를 구한다. &lt;strong&gt;k&amp;amp;7&lt;/strong&gt;은 2와 같고 &lt;strong&gt;1&amp;lt;&amp;lt;2&lt;/strong&gt;은 1을 좌측으로 2번 시프트 한것이므로 00000100가 된다.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/55785822-11459580-5aee-11e9-880c-38ea3a6c237f.png&#34; alt=&#34;인덱스찾기&#34; /&gt;
&lt;strong&gt;2. 소수 확인&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AND(&amp;amp;) 연산자를 사용했을때 소수라면 자기자신이 나온다.
&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/55788573-836ca900-5af3-11e9-963a-1486d936c6ef.png&#34; alt=&#34;소수찾기&#34; /&gt;
- k가 소수가 아님을 체크하는 방법&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void setComposite(int k) {
    sieve[k&amp;gt;&amp;gt;&amp;gt;3] &amp;amp;= ~(1 &amp;lt;&amp;lt; (k&amp;amp;7));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/37864122/55789370-31c51e00-5af5-11e9-97de-7e909ed35f23.png&#34; alt=&#34;소수아님기록&#34; /&gt;
전체코드&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class 에라토스테네스의체 {
    public static int LAST_NUM = 20;
    public static char sieve[] = new char[(LAST_NUM + 7)/8 + 1];
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        //에라토스테네스의 체 구하기
        eratosthenes();
        //소수 출력
        for(int i=0;i&amp;lt;=LAST_NUM;i++)
            if(isPrime(i))
                System.out.print(i+&amp;quot; &amp;quot;);
    }
    //k가 소수인지 아닌지 반환
    public static boolean isPrime(int k) {
        return (sieve[k&amp;gt;&amp;gt;&amp;gt;3] &amp;amp; (1&amp;lt;&amp;lt;(k&amp;amp;7))) == 0 ? false : true;
    }
    //k가 소수가 아님을 표시해둠
    public static void setComposite(int k) {
        sieve[k&amp;gt;&amp;gt;&amp;gt;3] &amp;amp;= ~(1 &amp;lt;&amp;lt; (k&amp;amp;7));
    }
    public static void eratosthenes() {
        //모든비트를 1로 초기화
        Arrays.fill(sieve, (char)255);
        setComposite(0);
        setComposite(1);
        for(int i=2;i&amp;lt;=Math.sqrt(LAST_NUM);i++)
            if(isPrime(i))
                //i의 배수(j)에 대해 isPrime(j)=false로 둔다.
                for(int j=i*i;j&amp;lt;=LAST_NUM;j+=i)
                    setComposite(j);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;연산자-우선순위&#34;&gt;연산자 우선순위&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;최우선연산자 ( ., [], () )&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;단항연산자 ( ++,&amp;ndash;,!,~,+/-   : 부정, bit변환&amp;gt;부호&amp;gt;증감)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;산술연산자 ( *,/,%,+,-,shift) &amp;lt; 시프트연산자 ( &amp;gt;&amp;gt;,&amp;lt;&amp;lt;,&amp;gt;&amp;gt;&amp;gt; ) &amp;gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;비교연산자 ( &amp;gt;,&amp;lt;,&amp;gt;=,&amp;lt;=,==,!= )&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;비트연산자 ( &amp;amp;,|,,~ )&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;논리연산자 (&amp;amp;&amp;amp; , || , !)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;삼항연산자 (조건식) ? :&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;대입연산자 =,*=,/=,%=,+=,-=&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>배열(Array), 동적배열(ArrayList), 연결리스트(LinkedList)</title>
      <link>https://hyenakim.github.io/2019/03/%EB%B0%B0%EC%97%B4array-%EB%8F%99%EC%A0%81%EB%B0%B0%EC%97%B4arraylist-%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist/</link>
      <pubDate>Fri, 29 Mar 2019 14:55:19 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/03/%EB%B0%B0%EC%97%B4array-%EB%8F%99%EC%A0%81%EB%B0%B0%EC%97%B4arraylist-%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist/</guid>
      <description>&lt;h1 id=&#34;배열&#34;&gt;* 배열&lt;/h1&gt;

&lt;p&gt;연속된 자료를 저장하기 위한 자료구조&lt;/p&gt;

&lt;h3 id=&#34;java-배열-선언&#34;&gt;java 배열 선언&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;int[] array = new int[6];
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;단점&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;크기가 넘어가면 더 큰 배열을 새로 할당해야 한다.&lt;/li&gt;
&lt;li&gt;길이가 n인 배열 중간에 원소를 삽입/삭제할 경우 O(n)의 시간이 걸린다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 단점을 해결하기 위해 동적배열과 연결리스트라는 자료구조를 사용한다.&lt;/p&gt;

&lt;h1 id=&#34;동적-배열&#34;&gt;* 동적 배열&lt;/h1&gt;

&lt;p&gt;자료의 크기가 변함에 따라 배열의 크기도 변하는 자료구조&lt;/p&gt;

&lt;h3 id=&#34;java-표준-라이브러리&#34;&gt;java 표준 라이브러리&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ArrayList&amp;lt;Integer&amp;gt; ArrayList = new ArrayList&amp;lt;&amp;gt;();

/*원소 추가*/
ArrayList.add(1);
ArrayList.add(2);

/*원소 삭제*/
ArrayList.remove(Integer.valueOf(2));

/*원소 찾기*/
System.out.println(ArrayList.indexOf(1));
/*
* 결과 :
* 0
* */

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;특징&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;삽입시 메모리를 재할당 하여 속도가 느리다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;연결-리스트&#34;&gt;* 연결 리스트&lt;/h1&gt;

&lt;p&gt;연결된 자료의 정보만 담고 있는 자료구조&lt;/p&gt;

&lt;h3 id=&#34;java-표준-라이브러리-1&#34;&gt;java 표준 라이브러리&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;LinkedList&amp;lt;Integer&amp;gt; LinkedList = new LinkedList&amp;lt;Integer&amp;gt;();

/*원소 추가*/
LinkedList.add(1);
LinkedList.add(2);
LinkedList.add(3);

/*원소 삭제*/
LinkedList.remove(Integer.valueOf(2));

/*순서대로 출력*/
Iterator&amp;lt;Integer&amp;gt; iterator = LinkedList.iterator();
while(iterator.hasNext())
{
  int n = iterator.next();
  System.out.println(n);
}
/*
* 결과 :
* 1
* 3
* */
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;특징&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;추가/삭제가 빈번하게 일어나는 대용량 데이터 처리가 필요할 때 사용하면 성능이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>스택(Stack),큐(Queue),데크(Deque)</title>
      <link>https://hyenakim.github.io/2019/03/%EC%8A%A4%ED%83%9Dstack%ED%81%90queue%EB%8D%B0%ED%81%ACdeque/</link>
      <pubDate>Thu, 21 Mar 2019 22:03:29 +0900</pubDate>
      
      <guid>https://hyenakim.github.io/2019/03/%EC%8A%A4%ED%83%9Dstack%ED%81%90queue%EB%8D%B0%ED%81%ACdeque/</guid>
      <description>&lt;h1 id=&#34;스택&#34;&gt;* 스택&lt;/h1&gt;

&lt;p&gt;나중에 들어온게 먼저 나가는 &lt;strong&gt;LIFO&lt;/strong&gt;형태의 자료구조&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LIFO : Last in First out&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;java-라이브러리-스택관련-메서드&#34;&gt;java 라이브러리 스택관련 메서드&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;Integer&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;push(E item)

&lt;ul&gt;
&lt;li&gt;해당 아이템을 스택의 top에 쌓는다.&lt;/li&gt;
&lt;li&gt;쌓았으면 true, 못쌓았으면 false를 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pop()

&lt;ul&gt;
&lt;li&gt;스택의 맨 위를 삭제하고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;peek()

&lt;ul&gt;
&lt;li&gt;스택의 맨위를 삭제하지 않고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;empty()

&lt;ul&gt;
&lt;li&gt;스택이 비어있으면 true, 아니면 false를 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;search(Object o)

&lt;ul&gt;
&lt;li&gt;해당 Object의 위치를 반환한다. top이면 1, 없으면 -1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;큐&#34;&gt;* 큐&lt;/h1&gt;

&lt;p&gt;먼저 들어온게 먼저 나가는 &lt;strong&gt;FIFO&lt;/strong&gt;형태의 자료구조&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FIFO : First in First out&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;java-라이브러리-큐관련-메서드&#34;&gt;java 라이브러리 큐관련 메서드&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Queue&amp;lt;Integer&amp;gt; q = new LinkedList&amp;lt;Integer&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;offer(E item)

&lt;ul&gt;
&lt;li&gt;해당 아이템을 큐에 넣는다.&lt;/li&gt;
&lt;li&gt;넣었으면 true, 못넣었으면 false반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;poll()

&lt;ul&gt;
&lt;li&gt;큐의 맨 앞을 삭제하고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;peek()

&lt;ul&gt;
&lt;li&gt;큐의 맨앞을 삭제하지 않고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;isEmpty()

&lt;ul&gt;
&lt;li&gt;큐가 비어있으면 true, 아니면 false를 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;덱&#34;&gt;* 덱&lt;/h1&gt;

&lt;p&gt;양쪽에서 삽입 삭제가 가능한 형태의 자료구조&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;사용에따라 스택, 큐가 될 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;java-라이브러리-덱관련-메서드&#34;&gt;java 라이브러리 덱관련 메서드&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Deque&amp;lt;Integer&amp;gt; deque = new ArrayDeque&amp;lt;Integer&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;add(E item)

&lt;ul&gt;
&lt;li&gt;해당 아이템을 덱에 넣는다.&lt;/li&gt;
&lt;li&gt;addFirst(E item)

&lt;ul&gt;
&lt;li&gt;덱의 맨 앞에 넣는다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;addLast(E item)

&lt;ul&gt;
&lt;li&gt;덱의 맨 뒤에 넣는다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;poll()

&lt;ul&gt;
&lt;li&gt;덱의 맨 앞을 삭제하고 반환한다.&lt;/li&gt;
&lt;li&gt;pollFirst()

&lt;ul&gt;
&lt;li&gt;덱의 맨 앞을 삭제하고 반환한다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pollLast()

&lt;ul&gt;
&lt;li&gt;덱의 맨 뒤를 삭제하고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;peek()

&lt;ul&gt;
&lt;li&gt;덱의 맨앞을 삭제하지 않고 반환한다.&lt;/li&gt;
&lt;li&gt;peekFirst()

&lt;ul&gt;
&lt;li&gt;덱의 맨앞을 삭제하지 않고 반환한다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;peekLast()

&lt;ul&gt;
&lt;li&gt;덱의 맨뒤를 삭제하지 않고 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;isEmpty()

&lt;ul&gt;
&lt;li&gt;덱이 비어있으면 true, 아니면 false를 반환한다.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>